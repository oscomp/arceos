searchState.loadedDescShard("axmm", 0, "ArceOS memory management module.\nThe virtual memory address space.\nAllocation mapping backend.\nA unified enum type for different memory mapping backends.\nLinear mapping backend.\nReturns the address space base.\nChecks whether an access to the specified memory region is …\nRemoves all mappings in the address space.\nClears the page table mappings in the given address range.\nChecks if the address space contains the given address …\nCopies page table mappings from another address space.\nReturns the address space end.\nSearches for a contiguous free region in the virtual …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles a page fault at the given address.\nInitializes virtual memory management.\nInitializes kernel paging for secondary CPUs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the globally unique kernel address space.\nReturns the root physical address of the kernel page table.\nAdd a new allocation mapping.\nAdd a new linear mapping.\nCreates a new allocation mapping backend.\nCreates a new empty address space.\nCreates a new address space for kernel itself.\nCreates a new linear mapping backend.\nMemory Page Iterator Wrapper Module\nReturns the reference to the inner page table.\nReturns the root physical address of the inner page table.\nEnsures that the specified virtual memory region is fully …\nUpdates mapping within the specified virtual address range.\nTo read data from the address space.\nReturns the address space size.\nAttempts to clone the current address space into a new one.\nRemoves mappings within the specified virtual address …\nTo remove user area mappings from address space.\nTo write data to the address space.\nAlignment parameters for the starting address and memory …\nAlignment parameters for the starting address and memory …\n<code>vaddr - paddr</code>.\nWhether to populate the physical frames when creating the …\n1GB page size constant (1,073,741,824 bytes)\n2MB page size constant (2,097,152 bytes)\n4K page size constant (4,096 bytes) and iterator type alias\n1GB page iterator type alias\n2MB page iterator type alias\n4K page size constant (4,096 bytes) and iterator type alias\nPage Iterator Wrapper Enum\n1G page iterator variant\n2M page iterator variant\n4K page iterator variant\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an iterator wrapper instance for the specified …\nRetrieves the next virtual address")